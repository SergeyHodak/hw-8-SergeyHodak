package lecture;

public class JavaCollectionFramework {}

/*
    Java Collection Framework#
    Мы уже умеем пользоваться массивами, и хранить в них данные.
    И в принципе с помощью массивов можно решить почти любую задачу, где нам нужно хранить много разных типов данных.
    Но это не всегда удобно по следующим причинам:
        массив имеет фиксированный размер. Если мы объявили массив на 100 элементов, то мы не сможем добавить туда 101-й элемент;
        к элементам массива можно доступаться лишь по индексу. Нельзя присваивать произвольные ключи.

    Понятие коллекции#
    Это существенные ограничения массивов, и для удобства работы программисты придумали коллекции.
    Коллекция - это способ хранить множество однотипных данных с удобным доступом к ним. Есть различные структуры
    данных (список, стек, очередь и т.д.), которые не привязаны к конкретным языкам программирования. И коллекции,
    по своей сути - это реализации этих структур данных на конкретном языке программирования.

    Java Collection Framework — иерархия интерфейсов и их реализаций, которая является частью JDK и позволяет
    разработчику пользоваться большим количесвом структур данных из «коробки».

    Базовые понятия#
    На вершине иерархии в Java Collection Framework располагаются 2 интерфейса: Collection и Map.
    Эти интерфейсы разделяют все коллекции, входящие во фреймворк на две части по типу хранения данных:
        простые последовательные наборы элементов и наборы пар «ключ — значение» (словари).

    Иерархия коллекций выглядит следующим образом:

                              <<<<interface>>>>                         <<<<interface>>>>
                                 Collection                                    Map
                                     ^
                                     |
            ----------------------------------------------------
            |                        |                         |
    <<<<interface>>>>        <<<<interface>>>>         <<<<interface>>>>
           Set                      List                     Queue

Дальше мы рассмотрим наиболее часто используемые коллекции.
 */