package hw8v1;  //привязка к пакету

/*
    Задание 1 - ArrayList#
    Написать свой класс MyArrayList как аналог классу ArrayList.

    Можно использовать 1 массив для хранения данных.

    Методы

    add(Object value) добавляет элемент в конец
    remove(int index) удаляет элемент под индексом
    clear() очищает коллекцию
    size() возвращает размер коллекции
    get(int index) возвращает элемент под индексом
 */

import java.util.Arrays;  // импортировал для превращения объекта массива в строку для печати в консоль

public class MyArrayList { //мой класс согласно домашнему заданию
    private Object[] array = new Object[]{}; //по создании класса создается пустой список

    public void add(Object value) {  // метод, который добавляет элемент в конец
        if (array.length == 0) {  // если список пустой
            array = new Object[] {value}; // создадим массив из добавляемого элемента
        } else { // иначе, то есть в массиве уже что-то есть
            Object[] temp = array; //сохраним имеющийся массив во временную переменную
            array = new Object[array.length +1]; //заменим существующий массив на массив пустых элементов с нужным количеством
            for (int i = 0; i < array.length; i++) { // пробежка по новому массиву
                if (i != array.length-1) { // если это не последний элемент массива
                    array[i] = temp[i]; // записываем в эту позицию значение из временной переменной
                } else { // иначе, то есть, когда у нас подошла очередь к последнему элементу в массиве
                    array[i] = value; // записываем в последнюю позицию добавляемое значение
                } //закрытие скрипта для элса процедур с последней позицией массива
            } //закрытие скрипта для фор цикла
        } //закрытие скрипта для элса процедур с не пустым массивом
    } //закрытие скрипта для метода добавление элемента в конец массива

    @Override //метка переопределение
    public String toString() { //переопределим метод вывода в консоль при вызове класса
        return Arrays.toString(array); //вывести в консоль массив
    }

    public void remove(int index) throws ArrayIsEmptyn, ExceedingTheIndex { // метод, который удаляет элемент под индексом
        if (array.length == 0) { //если массив пустой
            throw new ArrayIsEmptyn(); // вызываем собственный класс ошибок
        } else if (index >= array.length || index < 0) { //если мы пытаемся обратиться в несуществующий индекс массива
            throw new ExceedingTheIndex(index, size()); // вызываем собственный класс ошибок
        }
        Object[] temp = array; //сохраним имеющийся массив во временную переменную
        array = new Object[array.length -1]; //заменим существующий массив на массив пустых элементов с нужным количеством
        int j = 0; //шагатель по временной переменной со старым массивом
        for (int i = 0; i < array.length; i++) { // пробежка по новому массиву
            if (i != index) { //если шаг не равен удаляемой позиции
                array[i] = temp[j++]; // записываем в новый из старого
            } else { //иначе, позиция совпала с удаляемой
                array[i] = temp[++j]; //повысить шаг по старому массиву заранее, и записать значение
                j++; //перескочить на еще один шаг вперед в старом массиве
            }
        }
    }

    static class ArrayIsEmptyn extends Exception{  //собственный класс унаследованный от исключений
        ArrayIsEmptyn() { //конструктор класса
            super("Операция удаления из коллекции не доступна, коллекция и так пустая"); //что будет написано
        }
    }

    static class ExceedingTheIndex extends Exception{ //собственный класс унаследованный от исключений
        ExceedingTheIndex(int index, int count) { //конструктор класса
            super("Вызываемый индекс " + index + " для удаления, выходит за рамки существующей коллекции, количество элементов в ней = " + count); //что будет написано
        }
    }

    public void clear() { //метод очищающий массив
        array = new Object[]{}; //замена существующего на пустой массив
    }

    public int size() { //метод который, возвращает размер коллекции
        return array.length;  //размер массива
    }

    public Object get(int index) throws NoSuchIndex { //возвращает элемент под индексом
        if (index >= array.length || index < 0) { //если мы пытаемся обратиться в несуществующий индекс массива
            throw new NoSuchIndex(size(), index); // вызываем собственный класс ошибок
        }
        return array[index]; //элемент с массива под индексом
    }

    static class NoSuchIndex extends Exception{ //собственный класс унаследованный от исключений
        NoSuchIndex(int count, int index) { //конструктор класса
            super("Элемента с индексом " + index + " нет в коллекции. Содержание элементов в коллекции = " + count); //что будет написано
        }
    }

    public static void main(String[] args) throws ArrayIsEmptyn, ExceedingTheIndex, NoSuchIndex { //запускалка для тестов, с интеграцией исключений
        MyArrayList test = new MyArrayList(); //создаю экземпляр моего класса с домашней работы
        System.out.println(test); // смотрю на то как выглядит массив при создании экземпляра
        test.add(1); //добавляю первый элемент
        System.out.println(test); // смотрю что происходит с массивом
        test.add(2); test.add(3); test.add(4); //добавляю несколько элементов
        System.out.println(test); // смотрю что происходит

        System.out.println("----------------------------------------------"); //разделитель между тестами

        MyArrayList test1 = new MyArrayList(); //создаю 2й экземпляр моего класса с домашней работы
        //test1.remove(1); // тест как себя поведет, если массив пуст. Вызовет исключение
        test1.add(2); test1.add("data"); test1.add(4); // немножко заполним массив
        System.out.println(test1); // смотрим добавленные
        test1.remove(1); // удаляем второй элемент
        System.out.println(test1); // смотрим результат удаления
        //test1.remove(3); // удаляем 4й элемент //вызовет исключение

        System.out.println("----------------------------------------------"); //разделитель между тестами

        test.clear(); test1.clear(); //очищаем массивы
        System.out.println(test); // смотрю результат
        System.out.println(test1); // смотрю результат

        System.out.println("----------------------------------------------"); //разделитель между тестами

        MyArrayList test2 = new MyArrayList(); //создаю 3й экземпляр моего класса с домашней работы
        test2.add("car"); test2.add("Data"); test2.add(10004); // немножко заполним массив
        System.out.println(test2.size()); //смотри размер коллекции

        System.out.println("----------------------------------------------"); //разделитель между тестами
        System.out.println(test2.get(0)); //выведет в консоль 1й элемент
        System.out.println(test2.get(1)); //выведет в консоль 2й элемент
        System.out.println(test2.get(2)); //выведет в консоль 3й элемент
        //System.out.println(test2.get(3)); // вызовет исключение связанное с несуществующим индексом в коллекции
    }
}